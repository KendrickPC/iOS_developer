import UIKit

// Example: Animals With and Without Tails
// Here's another example: let’s say we have a struct called Animal.
// The Animal struct has a tail property and the tail property is an
// optional — not all animals have tails.

struct Tail {
    var length: String
    
    init(length: Int) {
        self.length = "\(length)"
    }
}

struct Animal {
    var name: String
    var species: String = "homo sapiens"
    var tail: Tail?
    
    init(name: String, species: String, tailLength: Int?) {
        self.name = name
        self.species = species
        if let tailLength = tailLength {
            self.tail = Tail(length: tailLength)
        } else {
            self.tail = nil
        }
    }
}

/*
 There's a lot going on in this example, so let's take a moment to break it down:

 You'll notice there's an interesting new method, called init. This is a special function (sometimes called a constructor) that is used when creating an instance of a struct. The structs in the previous lesson all used a default constructor that gets generated by Swift behind the scenes. For most structs, the default constructor is sufficient, but for the purpose of demonstrating optional binding, we need a place for our custom if let logic. You don't need to worry about the details of init methods quite yet, as this topic will be revisited in the lesson on Object Oriented Programming.

 With our custom constructor, we’ll instantiate an animal, Lenny. He’s a lemur with a 12 cm tail.
 */

var animal = Animal(name: "Lenny", species: "lemur", tailLength: 12)
//animal = Animal(name: "Gilbert", species: "Gorilla", tailLength: nil)
//Once Lenny has been initialized, we can use optional chaining (appending a ? to the property name) to access the optional tail property.

if let tailLength = animal.tail?.length {
    print("\(animal.name)'s tail is \(tailLength) cm long.")
} else {
    print("\(animal.name) doesn't have a tail.")
}


/*
 Nil Coalescing Operator:
 We already used optional chaining to avoid nesting if lets, but what if all we want to do is provide tailLength with a default value if the optional chaining fails? Swift provides a useful operator, for situations like these, the nil coalescing operator, ??.
        
        <optional expression> ?? <default case>

 To use the operator, simply place ?? after the optional chaining expression, and then put a default value after the ??.
 */

let tailLength = animal.tail?.length ?? "0"
print("Tail length: \(tailLength)")


//Your Turn
//Assume the following structs and enum are defined.

enum Genre: String {
    case country, blues, folk, kpop
}

struct Artist {
    let name: String
    var primaryGenre: Genre?
}

struct Song {
    let title: String
    let released: Int
    var artist: Artist?
}

// Using the enums and structures, implement the getArtistGenre() function. Given a Song as input, return the raw value of the artist's primary genre. If either the artist is nil or the primaryGenre is nil, then return an empty string. You must use optional chaining and the nil coalescing operator (??).

// Introduction to Swift: Optional chaining
// https://www.youtube.com/watch?v=S8-QO2wUbRg
// https://www.youtube.com/watch?v=fVaGY9wUZnQ

var BTS = Artist(name: "Bangtan Sonyeondan", primaryGenre: Genre.kpop)
var song = Song(title: "Boy With Luv", released: 2019, artist: BTS)

func getArtistGenre(song: Song) -> String {
    let primaryGenre = song.artist?.primaryGenre?.rawValue ?? ""
    return primaryGenre
}

print(getArtistGenre(song: song))

